openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8085
  description: Generated server url
paths:
  /api/v1/book/{bookId}:
    get:
      tags:
      - book-controller
      operationId: getBookById
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BookDTO'
    put:
      tags:
      - book-controller
      operationId: updateBookById
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
      - book-controller
      operationId: deleteBookById
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    patch:
      tags:
      - book-controller
      operationId: patchBookById
      parameters:
      - name: bookId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/book:
    get:
      tags:
      - book-controller
      operationId: listBooks
      parameters:
      - name: bookIsbn
        in: query
        required: false
        schema:
          type: integer
          format: int64
      - name: bookName
        in: query
        required: false
        schema:
          type: string
      - name: bookGenre
        in: query
        required: false
        schema:
          type: string
          enum:
          - FANTASY
          - HORROR
          - SCIFI
          - WESTERN
      - name: pageNumber
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageBookDTO'
    post:
      tags:
      - book-controller
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    BookDTO:
      type: object
      properties:
        bookId:
          type: string
          format: uuid
        bookIsbn:
          type: integer
          format: int64
        bookName:
          type: string
        bookGenre:
          type: string
          enum:
          - FANTASY
          - HORROR
          - SCIFI
          - WESTERN
        bookVersion:
          type: integer
          format: int32
        bookCreationDate:
          type: string
          format: date-time
        bookUpdateDate:
          type: string
          format: date-time
    PageBookDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/BookDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
